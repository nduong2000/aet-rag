# This workflow builds and pushes a Docker container to Google Artifact Registry
# and deploys it on Cloud Run when a commit is pushed to the "main" branch.
#
# Prerequisites:
# 1. Enable Google Cloud APIs: Artifact Registry, Cloud Run, IAM Credentials API
# 2. Create and configure Workload Identity Provider for GitHub
# 3. Set up required secrets in GitHub repository settings

name: 'Build and Deploy AET-RAG to Cloud Run'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [closed]

env:
  PROJECT_ID: 'aethrag2' # Your GCP project ID
  REGION: 'us-east1' # Your preferred region
  SERVICE: 'aet-rag-service' # Cloud Run service name
  REPOSITORY: 'aet-rag-repo' # Artifact Registry repository name
  IMAGE_NAME: 'aet-rag-app' # Docker image name

jobs:
  deploy:
    # Only run on main branch pushes or merged PRs
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true))
    
    runs-on: 'ubuntu-latest'
    
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
      - name: 'Checkout code'
        uses: 'actions/checkout@v4'
      
      # Authenticate to Google Cloud using Workload Identity Federation
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          # You'll need to set this up - see setup instructions below
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      # Set up Cloud SDK
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      # Create Artifact Registry repository if it doesn't exist
      - name: 'Create Artifact Registry repository'
        run: |
          gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} || \
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Docker repository for AET-RAG application"
      
      # Configure Docker to use gcloud as a credential helper
      - name: 'Configure Docker'
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # Build and push Docker image
      - name: 'Build and Push Container'
        run: |
          # Create image tag
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          LATEST_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
          
          # Build the Docker image
          docker build --tag "${IMAGE_TAG}" --tag "${LATEST_TAG}" .
          
          # Push both tags
          docker push "${IMAGE_TAG}"
          docker push "${LATEST_TAG}"
          
          # Output the image URL for the next step
          echo "IMAGE_URL=${IMAGE_TAG}" >> $GITHUB_ENV
      
      # Deploy to Cloud Run
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.IMAGE_URL }}
          flags: |
            --port=8080
            --memory=2Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --timeout=300
            --concurrency=80
            --cpu-throttling
            --allow-unauthenticated
          env_vars: |
            GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}
            GCP_LOCATION=${{ env.REGION }}
            PORT=8080
      
      # Output the service URL
      - name: 'Show deployment URL'
        run: |
          echo "üöÄ Application deployed successfully!"
          echo "üìç Service URL: ${{ steps.deploy.outputs.url }}"
          echo "üîç You can view logs with: gcloud logging read 'resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.SERVICE }}' --limit 50 --format json"
